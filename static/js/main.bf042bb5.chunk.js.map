{"version":3,"sources":["components/Airports.js","App.js","serviceWorker.js","index.js"],"names":["Airports","useState","value","setValue","airports","setAirports","loading","setLoading","showAirport","setShowAirport","className","onClick","fetch","then","res","json","data","map","d","label","name","city","country","code","response","catch","err","console","log","options","onChange","e","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6MAqDeA,MA9Cf,WAAqB,IAAD,EAEQC,mBAAS,MAFjB,mBAEXC,EAFW,KAEJC,EAFI,OAGcF,mBAAS,IAHvB,mBAGXG,EAHW,KAGDC,EAHC,OAIYJ,oBAAS,GAJrB,mBAIXK,EAJW,KAIFC,EAJE,OAKoBN,oBAAS,GAL7B,mBAKXO,EALW,KAKEC,EALF,KA4BlB,OACE,yBAAKC,UAAU,kBACb,4BAAQA,UAAU,MAAMC,QANN,WAfpBJ,GAAW,GACXE,GAAe,GACfG,MAAM,iBACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIA,EAAKC,KAAI,SAAAC,GACrB,MAAO,CAACC,MAAM,GAAD,OAAKD,EAAEE,KAAP,cAAiBF,EAAEG,KAAnB,YAA2BH,EAAEI,QAA7B,cAA0CJ,EAAEK,MAAQrB,MAAOgB,EAAEK,YAE3EV,MAAK,SAAAW,GAAQ,OAAInB,EAAYmB,MAC7BX,MAAK,kBAAMN,GAAW,MACtBkB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAY1B,YACIlB,GAAe,kBAAC,IAAD,CACjBqB,QAASzB,EACT0B,SAZgB,SAACC,GACrB5B,EAAS4B,IAYL7B,MAAOA,EACP8B,YAAa1B,EAAU,UAAY,mBAEpCJ,GAAS,yBAAKQ,UAAU,WACvB,8BAAOR,EAAMiB,UCjCNc,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCKcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.bf042bb5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'react-select/dist/react-select.css'\nimport 'react-virtualized/styles.css'\nimport 'react-virtualized-select/styles.css'\nimport VirtualizedSelect from 'react-virtualized-select'\n\n\nfunction Airports() {\n\n  const [value, setValue] = useState(null);\n  const [airports, setAirports] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [showAirport, setShowAirport] = useState(false);\n\n\n  const getAirportsdata = () => {\n    setLoading(true);\n    setShowAirport(true);\n    fetch('airports.json')\n      .then(res => res.json())\n      .then(data => data.map(d => {\n        return {label: `${d.name} - ${d.city}/${d.country} - ${d.code}`, value: d.code}\n      }))\n      .then(response => setAirports(response))\n      .then(() => setLoading(false))\n      .catch(err => console.log(err));\n  }\n\n  const changeHandler = (e) => {\n    setValue(e);\n  }\n  const buttonHandler = () => {\n    getAirportsdata();\n  }\n\n  return (\n    <div className=\"airport-select\">\n      <button className=\"btn\" onClick={buttonHandler}>Airports</button>\n        { showAirport && <VirtualizedSelect\n        options={airports}\n        onChange={changeHandler}\n        value={value}\n        placeholder={loading ? \"Loading\" : \"Select Airport\"}\n      />}\n      {value && <div className=\"airport\">\n        <span>{value.label}</span>\n      </div>\n}\n    </div>\n    \n    \n  );\n}\nexport default Airports;","import React from 'react';\nimport './App.css';\nimport Airports from './components/Airports';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Airports />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}